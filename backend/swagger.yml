# swagger.yml
# blueprint for the API - for frontend to use
# define the data your web server can expect 
# how server should respond to requests

# The full request URL is constructed as <server-url>/path.
openapi: 3.0.0
info:
  title: Medical Record API
  description: "API with test medical records for setting up appointments and managing patient data."
  version: 1.0.0

servers:
  - url: "/api" # base path for all endpoints

components:
  schemas:
    question:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
        timestamp:
          type: string
      required:
        - question
        - answer
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
      required:
        - street
        - city
        - state
        - zip
    contact:
      type: object
      properties:
        phone:
          type: string
        email:
          type: string
      required:
        - phone
        - email
    emergency_contact:
      type: object
      properties:
        name:
          type: string
        relationship:
          type: string
        phone:
          type: string
        email:
          type: string
      required:
        - name
        - relationship
        - phone
        - email
    Patient:
      type: object
      properties:
        ID:
          type: integer
        name:
          type: string
        age:
          type: integer
        #pre-quesitonnare
        recent_changes_in_health_yn:
          type: boolean
        pre-existing_conditions:
          #array of strings that are conditions
          type: array
          items:
            type: string
        medications:
          type: boolean
        any_allergies_yn:
          type: boolean  
        #ask for these fields in telehealth or appointment form
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/contact'
        emergency_contact:
          $ref: '#/components/schemas/emergency_contact'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/question'
      required:
        - ID
        - name
        - age
        - recent_changes_in_health_yn
        - pre-existing_conditions
        - medications
        - any_allergies_yn
paths:
  /patient: #relative path
    get: #
      summary: Returns a list of all paitents
      operationId: api.get_patients
      responses:
        '200':    # HTTP status code
          description: A JSON array of patients
          content:
            application/json:    # Media type
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Patient'
    post:
      summary: Creates a new patient
      operationId: api.create_patient_initial
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          description: Invalid input
  #patient by ID
  /patient/{ID}: 
    get:
      summary: Returns a patient by ID
      operationId: api.get_patient_by_ID
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A patient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found
    put:
      summary: Updates a patient
      operationId: api.update_patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found
#TODO: add delete method

